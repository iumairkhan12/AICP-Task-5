+*In[1]:*+
[source, ipython3]
----
# Tic Tac Toe Game in Python

def print_board(board):
    for row in board:
        print(" ".join(row))

def check_winner(board, player):
    # Check rows and columns
    for i in range(3):
        if all(board[i][j] == player for j in range(3)) or all(board[j][i] == player for j in range(3)):
            return True

    # Check diagonals
    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True

    return False

def is_board_full(board):
    return all(board[i][j] != ' ' for i in range(3) for j in range(3))

def main():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    current_player = 'X'

    while True:
        print_board(board)

        row = int(input(f"Enter row (0, 1, or 2) for player {current_player}: "))
        col = int(input(f"Enter column (0, 1, or 2) for player {current_player}: "))

        if board[row][col] == ' ':
            board[row][col] = current_player

            if check_winner(board, current_player):
                print_board(board)
                print(f"Player {current_player} wins!")
                break

            if is_board_full(board):
                print_board(board)
                print("It's a tie!")
                break

            current_player = 'O' if current_player == 'X' else 'X'
        else:
            print("Cell already occupied. Try again.")

if __name__ == "__main__":
    main()

----


+*Out[1]:*+
----
     
     
     
Enter row (0, 1, or 2) for player X: 4
Enter column (0, 1, or 2) for player X: 2


    ---------------------------------------------------------------------------

    IndexError                                Traceback (most recent call last)

    Cell In[1], line 50
         47             print("Cell already occupied. Try again.")
         49 if __name__ == "__main__":
    ---> 50     main()
    

    Cell In[1], line 32, in main()
         29 row = int(input(f"Enter row (0, 1, or 2) for player {current_player}: "))
         30 col = int(input(f"Enter column (0, 1, or 2) for player {current_player}: "))
    ---> 32 if board[row][col] == ' ':
         33     board[row][col] = current_player
         35     if check_winner(board, current_player):
    

    IndexError: list index out of range

----


+*In[ ]:*+
[source, ipython3]
----
def print_board(board):
    for row in board:
        print(" ".join(row))

def check_winner(board, player):
    # Check rows and columns
    for i in range(3):
        if all(board[i][j] == player for j in range(3)) or all(board[j][i] == player for j in range(3)):
            return True

    # Check diagonals
    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True

    return False

def is_board_full(board):
    return all(board[i][j] != ' ' for i in range(3) for j in range(3))

def main():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    current_player = 'X'

    while True:
        print_board(board)

        try:
            row = int(input(f"Enter row (0, 1, or 2) for player {current_player}: "))
            col = int(input(f"Enter column (0, 1, or 2) for player {current_player}: "))

            if 0 <= row < 3 and 0 <= col < 3 and board[row][col] == ' ':
                board[row][col] = current_player

                if check_winner(board, current_player):
                    print_board(board)
                    print(f"Player {current_player} wins!")
                    break

                if is_board_full(board):
                    print_board(board)
                    print("It's a tie!")
                    break

                current_player = 'O' if current_player == 'X' else 'X'
            else:
                print("Invalid input. Please enter valid row and column values.")
        except ValueError:
            print("Invalid input. Please enter numeric values for row and column.")

if __name__ == "__main__":
    main()

----


+*Out[ ]:*+
----
     
     
     
Enter row (0, 1, or 2) for player X: 2
Enter column (0, 1, or 2) for player X: 4
Invalid input. Please enter valid row and column values.
     
     
     
Enter row (0, 1, or 2) for player X: 1
Enter column (0, 1, or 2) for player X: 2
     
    X
     
Enter row (0, 1, or 2) for player O: 0
Enter column (0, 1, or 2) for player O: 2
    O
    X
     
----


+*In[ ]:*+
[source, ipython3]
----

----
